# Generated by Django 1.11.12 on 2018-05-29 14:38
import sys
from django.db import migrations


def get_descendant_ids(model_class, root_id):
    """
    Returns the a generator of primary keys which represent
    descendants of the given plugin ID (root_id)
    """
    ids = (
        model_class
        .objects
        .filter(parent=root_id)
        .order_by('position')
        .values_list('pk', flat=True)
    )

    for child_id in ids:
        yield child_id

        for child_id in get_descendant_ids(model_class, child_id):
            yield child_id


def set_plugin_absolute_position(apps, schema_editor):
    # raise Exception("This migration is intentionally stopped here")
    db_alias = schema_editor.connection.alias
    CMSPlugin = apps.get_model('cms', 'CMSPlugin')
    Placeholder = apps.get_model('cms', 'Placeholder')
    placeholders = Placeholder.objects.using(db_alias).all()
    all_languages = (
        CMSPlugin
        .objects
        .using(db_alias)
        .values_list('language', flat=True)
        .distinct()
    )

    for language in all_languages:
        for placeholder in placeholders:
            plugins = placeholder.cmsplugin_set.filter(language=language)
            root_plugin_ids = (
                plugins
                .filter(parent__isnull=True)
                .order_by('position')
                .values_list('pk', flat=True)
            )
            position, changed_plugins = 0, []
            for root_id in root_plugin_ids:
                for plugin in plugins.filter(pk=root_id):
                    position = plugin.position = position + 1
                    changed_plugins.append(plugin)

                for desc_id in get_descendant_ids(CMSPlugin, root_id=root_id):
                    for plugin in plugins.filter(pk=desc_id):
                        position = plugin.position = position + 1
                        changed_plugins.append(plugin)
            CMSPlugin.objects.using(db_alias).bulk_update(changed_plugins, ['position'])

            num_positions = placeholder.cmsplugin_set.filter(language=language).values_list('position', flat=True).distinct().count()
            if num_positions != plugins.count() or position != num_positions:
                page_title = placeholder.page_set.first().title_set.get(language=language).title
                sys.stdout.write(f"Duplicate positions found in {placeholder.pk} for language {language} on page {page_title}")
            if placeholder.pk % 100 == 0:
                sys.stdout.write(".")
                sys.stdout.flush()


class Migration(migrations.Migration):
    atomic = False
    dependencies = [
        ('cms', '0023_placeholder_source_field'),
    ]

    operations = [
        migrations.RunPython(set_plugin_absolute_position),
    ]
